%{

#include "hw3_output.hpp"

extern int yylineno;
extern int yylex();
void yyerror(const char* message);

%}

%code requires 
{
    #include "abstract_syntax.hpp" 
    #include "generic_syntax.hpp" 
    #include "expression_syntax.hpp"
    #include "statement_syntax.hpp" 
}

%union 
{ 
    int                                       num;
    char*                                     str;
    root_syntax*                              root;
    type_syntax*                              type;                  
    formal_syntax*                            formal;     
    function_declaration_syntax*              function;            
    statement_syntax*                         statement; 	
    expression_syntax*                        expression;  
    list_syntax<formal_syntax>*               formal_list;		         
    list_syntax<function_declaration_syntax>* function_list;	
    list_syntax<statement_syntax>*            statement_list;
    list_syntax<expression_syntax>*           expression_list;                
 };

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token <num> NUM
%token <str> ID
%token <str> STRING

%right ASSIGN
%nonassoc IF // TODO: VERIFY IF IN RIGHT POSITION
%left OR
%left AND
%left <str> EQOP
%left <str> RELOP
%left <str> ADDOP
%left <str> MULOP
%right NOT
%right LPAREN
%left RPAREN
%left ELSE

%type <root>            Program
%type <function_list>   Funcs
%type <function>        FuncDecl
%type <type>            RetType
%type <formal_list> 	Formals
%type <formal_list>     FormalsList
%type <formal>          FormalDecl
%type <statement_list>  Statements
%type <statement>   	Statement
%type <expression>      Call
%type <expression_list> ExpList
%type <type>			Type
%type <expression>      Exp

%%

Program 	: Funcs 													{ }
			;
Funcs   	: /*epsilon*/												{ }
      		| FuncDecl Funcs											{ }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { }
			;
RetType 	: Type                                                      { }
        	| VOID                                                      { }
			;
Formals 	: /*epsilon*/                                               { }
        	| FormalsList                                               { }
			;
FormalsList : FormalDecl                                                { }
			| FormalDecl COMMA FormalsList                              { }
			;
FormalDecl 	: Type ID                                                   { }
			;
Statements	: Statement	                                                { }
 			| Statements Statement                                      { }
			;
Statement	: LBRACE Statements RBRACE                                  { }
			| Type ID SC                                                { }
			| Type ID ASSIGN Exp SC                                     { }
			| ID ASSIGN Exp SC                                          { }
			| Call SC                                                   { }
			| RETURN SC	                                                { }
			| RETURN Exp SC                                             { }
			| IF LPAREN Exp RPAREN Statement                            { }
			| IF LPAREN Exp RPAREN Statement ELSE Statement             { }
			| WHILE LPAREN Exp RPAREN Statement                         { }
			| BREAK SC                                                  { }
			| CONTINUE SC                                               { }
            ;
Call 		: ID LPAREN ExpList RPAREN                                  { }
 			| ID LPAREN RPAREN                                          { }
			;
ExpList 	: Exp                                                       { }
 			| Exp COMMA ExpList                                         { }
			;
Type 		: INT                                                       { }
			| BYTE                                                      { }
			| BOOL                                                      { }
			;
Exp 		: LPAREN Exp RPAREN	                                        { }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                         { }
			| Exp ADDOP Exp                                             { }
            | Exp MULOP Exp                                             { }
			| ID                                                        { }
			| Call                                                      { }
			| NUM                                                       { }
			| NUM B                                                     { }
			| STRING                                                    { }
			| TRUE                                                      { }
			| FALSE                                                     { }
			| NOT Exp                                                   { }
			| Exp AND Exp                                               { }
			| Exp OR Exp                                                { }
			| Exp RELOP Exp                                             { }
            | Exp EQOP Exp                                              { } 
			| LPAREN Type RPAREN Exp                                    { }
			;

%%

int main()
{
	return yyparse();
}

void yyerror(const char* message)
{
    output::errorSyn(yylineno);
	exit(0); 
}

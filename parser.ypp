%{

#include "hw3_output.hpp"

extern int yylex();
void yyerror(const char* message);
extern int yylineno;

%}

%code requires 
{
    #include "abstract_syntax.hpp" 
    #include "generic_syntax.hpp" 
    #include "expression_syntax.hpp" 
    #include "statement_syntax.hpp" 
}

%union 
{ 
    class root_syntax*                              root;
    class list_syntax<function_declaration_syntax>* function_list;
	class function_declaration_syntax*              function;
    class type_syntax*                              type;                  
    class list_syntax<formal_syntax>*               formal_list;	
    class formal_syntax*                            formal;                 
    class statement_syntax*                         statement; 			
    class list_syntax<statement_syntax>*            statement_list;
    class invocation_expression_syntax*             invocation;
    class list_syntax<expression_syntax>*           expression_list;                
    class expression_syntax*                        expression;           
 };

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right ASSIGN
%nonassoc IF // TODO: VERIFY IF IN RIGHT POSITION
%left  OR
%left  AND
%left  EQOP
%left  RELOP
%left  ADDOP
%left  MULOP
%right NOT
%right LPAREN
%left  RPAREN
%left  ELSE

%type <root>            Program
%type <function_list>   Funcs
%type <function>        FuncDecl
%type <type>            RetType
%type <formal_list> 	Formals
%type <formal_list>     FormalsList
%type <formal>          FormalDecl
%type <statement_list>  Statements
%type <statement>   	Statement
%type <invocation>      Call
%type <expression_list> ExpList
%type <type>			Type
%type <expression>      Exp

%%

Program 	: Funcs 													{ $$ = new root_syntax($1); }
			;
Funcs   	: /*epsilon*/												{ $$ = new list_syntax<function_declaration_syntax>(); }
      		| FuncDecl Funcs											{ $$ = $2->append($1); }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { }
			;
RetType 	: Type                                                      { $$ = $1; }
        	| VOID                                                      { $$ = new type_syntax(fundamental_type::Void); }
			;
Formals 	: /*epsilon*/                                               { $$ = new list_syntax<formal_syntax>(); }
        	| FormalsList                                               { $$ = $1; }
			;
FormalsList : FormalDecl                                                { $$ = new list_syntax<formal_syntax>($1); }
			| FormalDecl COMMA FormalsList                              { $$ = $3->append($1); }
			;
FormalDecl 	: Type ID                                                   { }
			;
Statements	: Statement	                                                { $$ = new list_syntax<statement_syntax>($1); }
 			| Statements Statement                                      { $$ = $1->append($2); }
			;
Statement	: LBRACE Statements RBRACE                                  { $$ = new block_statement_syntax($2); }
			| Type ID SC                                                { }
			| Type ID ASSIGN Exp SC                                     { }
			| ID ASSIGN Exp SC                                          { }
			| Call SC                                                   { $$ = new expression_statement_syntax($1); }
			| RETURN SC	                                                { $$ = new return_statement_syntax(); }
			| RETURN Exp SC                                             { $$ = new return_statement_syntax($2); }
			| IF LPAREN Exp RPAREN Statement                            { $$ = new if_statement_syntax($3, $5); }
			| IF LPAREN Exp RPAREN Statement ELSE Statement             { $$ = new if_statement_syntax($3, $5, $7); }
			| WHILE LPAREN Exp RPAREN Statement                         { $$ = new while_statement_syntax($3, $5); }
			| BREAK SC                                                  { $$ = new branch_statement_syntax(branch_type::Break); }
			| CONTINUE SC                                               { $$ = new branch_statement_syntax(branch_type::Continue); }
Call 		: ID LPAREN ExpList RPAREN                                  { }
 			| ID LPAREN RPAREN                                          { }
			;
ExpList 	: Exp                                                       { $$ = new list_syntax<expression_syntax>($1); }
 			| Exp COMMA ExpList                                         { $$ = $3->append($1); }
			;
Type 		: INT                                                       { $$ = new type_syntax(fundamental_type::Int); }
			| BYTE                                                      { $$ = new type_syntax(fundamental_type::Byte); }
			| BOOL                                                      { $$ = new type_syntax(fundamental_type::Bool); }
			;
Exp 		: LPAREN Exp RPAREN	                                        { $$ = $2; }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                         { $$ = new conditional_expression_syntax($1, $4, $7); }
			| Exp ADDOP Exp                                             { }
            | Exp MULOP Exp                                             { }
			| ID                                                        { }
			| Call                                                      { $$ = $1; }
			| NUM                                                       { }
			| NUM B                                                     { }
			| STRING                                                    { }
			| TRUE                                                      { $$ = new literal_expression_syntax<bool>(true);}
			| FALSE                                                     { $$ = new literal_expression_syntax<bool>(false); }
			| NOT Exp                                                   { $$ = new not_expression_syntax($2); }
			| Exp AND Exp                                               { }
			| Exp OR Exp                                                { }
			| Exp RELOP Exp                                             { }
            | Exp EQOP Exp                                              { } 
			| LPAREN Type RPAREN Exp                                    { $$ = new cast_expression_syntax($2, $4); }
			;

%%

int main()
{
	return yyparse();
}

void yyerror(const char* message)
{
    output::errorSyn(yylineno);
	exit(0); 
}

%{

#include "hw3_output.hpp"
#include "symbol_table.hpp"
#include "generic_syntax.hpp" 
#include <list>
#include <string>

extern int yylineno;

extern int yylex();

static symbol_table& symtab = symbol_table::instance();

void yyerror(const char* message);

void add_function_symbol(type_syntax* return_type, syntax_token* indentifier_token, list_syntax<formal_syntax>* formal_list);

expression_syntax* create_byte_literal_expression(syntax_token* value_token, syntax_token* b_token);

void print_current_scope();

void validate_main();

%}

%code requires 
{
    #include "syntax_token.hpp"
    #include "abstract_syntax.hpp" 
    #include "generic_syntax.hpp" 
    #include "expression_syntax.hpp"
    #include "statement_syntax.hpp" 
}

%union 
{ 
    syntax_token*                             token;
    root_syntax*                              root;
    type_syntax*                              type;                  
    formal_syntax*                            formal;     
    function_declaration_syntax*              function;            
    statement_syntax*                         statement; 	
    expression_syntax*                        expression;  
    list_syntax<formal_syntax>*               formal_list;		         
    list_syntax<function_declaration_syntax>* function_list;	
    list_syntax<statement_syntax>*            statement_list;
    list_syntax<expression_syntax>*           expression_list;                
 };

%token <token> VOID
%token <token> INT
%token <token> BYTE
%token <token> B
%token <token> BOOL
%token <token> TRUE
%token <token> FALSE
%token <token> RETURN
%token <token> WHILE
%token <token> BREAK
%token <token> CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token <token> NUM
%token <token> ID
%token <token> STRING

%right <token> ASSIGN
%nonassoc <token> IF // TODO: VERIFY IF IN RIGHT POSITION
%left <token> OR
%left <token> AND
%left <token> EQOP
%left <token> RELOP
%left <token> ADDOP
%left <token> MULOP
%right <token> NOT
%right LPAREN
%left RPAREN
%left <token> ELSE

%type <root>            Program
%type <function_list>   Funcs
%type <function>        FuncDecl
%type <type>            RetType
%type <formal_list> 	Formals
%type <formal_list>     FormalsList
%type <formal>          FormalDecl
%type <statement_list>  Statements
%type <statement>   	Statement
%type <expression>      Call
%type <expression_list> ExpList
%type <type>			Type
%type <expression>      Exp

%%

Program 	: Funcs 										        { $$ = new root_syntax($1); validate_main(); }
			;       
Funcs   	: /*epsilon*/								            { $$ = new list_syntax<function_declaration_syntax>(); }
      		| FuncDecl Funcs							            { $$ = $2->push_front($1); }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN                      { add_function_symbol($1, $2, $4); } 
              LBRACE Statements CS RBRACE                           { $$ = new function_declaration_syntax($1, $2, $4, $8); }
			;
RetType 	: Type                                                  { $$ = $1; }
        	| VOID                                                  { $$ = new type_syntax($1); }
			;       
Formals 	: /*epsilon*/                                           { $$ = new list_syntax<formal_syntax>(); }
        	| FormalsList                                           { $$ = $1; }
			;       
FormalsList : FormalDecl                                            { $$ = new list_syntax<formal_syntax>($1); }
			| FormalDecl COMMA FormalsList                          { $$ = $3->push_front($1); }
			;       
FormalDecl 	: Type ID                                               { $$ = new formal_syntax($1, $2); }
			;       
Statements	: Statement	                                            { $$ = new list_syntax<statement_syntax>($1); }
 			| Statements Statement                                  { $$ = $1->push_back($2); }
			;
Statement	: LBRACE OS Statements CS RBRACE                        { $$ = new block_statement_syntax($3); }
			| Type ID SC                                            { $$ = new declaration_statement_syntax($1, $2); }
			| Type ID ASSIGN Exp SC                                 { $$ = new declaration_statement_syntax($1, $2, $3, $4); }
			| ID ASSIGN Exp SC                                      { $$ = new assignment_statement_syntax($1, $2, $3); }
			| Call SC                                               { $$ = new expression_statement_syntax($1); }
			| RETURN SC	                                            { $$ = new return_statement_syntax($1); }
			| RETURN Exp SC                                         { $$ = new return_statement_syntax($1, $2); }
			| IF LPAREN OS Exp CS RPAREN OSIF Statement CSIF        { $$ = new if_statement_syntax($1, $4, $8);  }
			| IF LPAREN OS Exp CS RPAREN OSIF Statement CSIF 
              ELSE OSIF Statement CSIF                              { $$ = new if_statement_syntax($1, $4, $8, $10, $12); }
			| WHILE LPAREN OS Exp CS RPAREN OSWH Statement CSWH     { $$ = new while_statement_syntax($1, $4, $8); }
			| BREAK SC                                              { $$ = new branch_statement_syntax($1); }
			| CONTINUE SC                                           { $$ = new branch_statement_syntax($1); }
            ;       
Call 		: ID LPAREN ExpList RPAREN                              { $$ = new invocation_expression_syntax($1, $3); }
 			| ID LPAREN RPAREN                                      { $$ = new invocation_expression_syntax($1); }
			;       
ExpList 	: Exp                                                   { $$ = new list_syntax<expression_syntax>($1); }
 			| Exp COMMA ExpList                                     { $$ = $3->push_front($1); }
			;       
Type 		: INT                                                   { $$ = new type_syntax($1); }
			| BYTE                                                  { $$ = new type_syntax($1); }
			| BOOL                                                  { $$ = new type_syntax($1); }
			;       
Exp 		: LPAREN Exp RPAREN	                                    { $$ = $2; }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                     { $$ = new conditional_expression_syntax($1, $2, $4, $6, $7); }
			| Exp ADDOP Exp                                         { $$ = new arithmetic_expression_syntax($1, $2, $3); }
            | Exp MULOP Exp                                         { $$ = new arithmetic_expression_syntax($1, $2, $3); }
			| ID                                                    { $$ = new identifier_expression_syntax($1); }
			| Call                                                  { $$ = $1; }
			| NUM                                                   { $$ = new literal_expression_syntax<int>(std::stoi($1->text), $1); }
			| NUM B                                                 { $$ = create_byte_literal_expression($1, $2); }
			| STRING                                                { $$ = new literal_expression_syntax<std::string>($1->text, $1); }
			| TRUE                                                  { $$ = new literal_expression_syntax<bool>(true, $1); }
			| FALSE                                                 { $$ = new literal_expression_syntax<bool>(false, $1); }
			| NOT Exp                                               { $$ = new not_expression_syntax($1, $2); }
			| Exp AND Exp                                           { $$ = new logical_expression_syntax($1, $2, $3); }
			| Exp OR Exp                                            { $$ = new logical_expression_syntax($1, $2, $3); }
			| Exp RELOP Exp                                         { $$ = new relational_expression_syntax($1, $2, $3); }
            | Exp EQOP Exp                                          { $$ = new relational_expression_syntax($1, $2, $3); } 
			| LPAREN Type RPAREN Exp                                { $$ = new cast_expression_syntax($2, $4); }
			;
OSIF        : /*epsilon*/                                           { symtab.open_scope(0, scope_owner::If); } 
            ;
CSIF        : /*epsilon*/                                           { print_current_scope(); symtab.close_scope(); }
            ;
OSWH        : /*epsilon*/                                           { symtab.open_scope(0, scope_owner::While); } 
            ;
CSWH        : /*epsilon*/                                           { print_current_scope(); symtab.close_scope(); }
            ;
OS          : /*epsilon*/                                           { 
                                                                        scope_owner owner = symtab.current_scope().owner;
                                                                        if (owner != scope_owner::If && owner != scope_owner::While)
                                                                        {
                                                                            symtab.open_scope();
                                                                        }       
                                                                    } 
            ;       
CS          : /*epsilon*/                                           { 
                                                                        scope_owner owner = symtab.current_scope().owner;
                                                                        if (owner != scope_owner::If && owner != scope_owner::While)
                                                                        {
                                                                            print_current_scope();
                                                                            symtab.close_scope(); 
                                                                        }                           
                                                                    }
            ;
%%

int main()
{
    symtab.open_scope();
    symtab.add_function("print", fundamental_type::Void, std::vector<fundamental_type>{fundamental_type::String});
    symtab.add_function("printi", fundamental_type::Void, std::vector<fundamental_type>{fundamental_type::Int});

	int res = yyparse();

    print_current_scope();
    symtab.close_scope();

    return res;
}

void yyerror(const char* message)
{
    output::errorSyn(yylineno);
}

void add_function_symbol(type_syntax* return_type, syntax_token* indentifier_token, list_syntax<formal_syntax>* formal_list)
{
    string name = indentifier_token->text;

    if (symtab.contains_symbol(name))
    {
        output::errorDef(yylineno, name);
    }

    std::vector<fundamental_type> param_types;

    for (formal_syntax* fs : formal_list->get_elements())
    {
        param_types.push_back(fs->type->type);
    } 

    symtab.add_function(name, return_type->type, param_types);

    symtab.open_scope(-1 * (int)param_types.size(), scope_owner::Func);

    for (formal_syntax* fs : formal_list->get_elements())
    {
        if (symtab.contains_symbol(fs->identifier))
        {
            output::errorDef(yylineno, name);
        }

        symtab.add_variable(fs->identifier, fs->type->type);
    }
}

expression_syntax* create_byte_literal_expression(syntax_token* value_token, syntax_token* b_token)
{
    delete b_token;

    int value = std::stoi(value_token->text);

    if (value >= 256 || value < 0) 
    {
        output::errorByteTooLarge(value_token->definition_line, value_token->text);
    }

    return new literal_expression_syntax<char>(value, value_token); 
}

void print_current_scope()
{
    output::endScope();

    for (symbol* sym : symbol_table::instance().current_scope().get_symbols())
    {
        if (sym->sym_type == symbol_type::Var)
        {
            variable_symbol* var_sym = dynamic_cast<variable_symbol*>(sym);

            output::printID(var_sym->name, var_sym->offset, fundamental_type_to_string(var_sym->type));
        }
        else if (sym->sym_type == symbol_type::Func)
        {
            function_symbol* func_sym = dynamic_cast<function_symbol*>(sym);

            vector<string> param_types;

            for (fundamental_type ft : func_sym->parameter_types)
            {
                param_types.push_back(fundamental_type_to_string(ft));
            }

            string func_type = output::makeFunctionType(fundamental_type_to_string(func_sym->type), param_types);

            output::printID(func_sym->name, 0, func_type);
        }
        else
        {
            throw std::runtime_error("unknown symbol type");
        }
    }
}

void validate_main()
{
    symbol* main_sym = symtab.get_symbol("main");

    if (main_sym == nullptr)
    {
        output::errorMainMissing();
    }

    if (main_sym->sym_type != symbol_type::Func)
    {
        output::errorMainMissing();
    }

    function_symbol* func_sym = dynamic_cast<function_symbol*>(main_sym);

    if (func_sym->type != fundamental_type::Void)
    {
        output::errorMainMissing();
    }

    if (func_sym->parameter_types.size() != 0)
    {
        output::errorMainMissing();
    }
}

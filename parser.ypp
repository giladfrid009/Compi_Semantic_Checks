%{

#include "output.hpp"

extern int yylex();
void yyerror(const char* message);
extern int yylineno;

using output::printProductionRule;

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right ASSIGN
%left  OR
%left  AND
%left  EQOP
%left  RELOP
%left  ADDOP
%left  MULOP
%right NOT
%right LPAREN
%left  RPAREN
%left  ELSE

%%

Program 	: Funcs 													{ printProductionRule(1); }
			;
Funcs   	: /*epsilon*/												{ printProductionRule(2); }
      		| FuncDecl Funcs											{ printProductionRule(3); }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { printProductionRule(4); }
			;
RetType 	: Type                                                      { printProductionRule(5); }
        	| VOID                                                      { printProductionRule(6); }
			;
Formals 	: /*epsilon*/                                               { printProductionRule(7); }
        	| FormalsList                                               { printProductionRule(8); }
			;
FormalsList : FormalDecl                                                { printProductionRule(9); }
			| FormalDecl COMMA FormalsList                              { printProductionRule(10); }
			;
FormalDecl 	: Type ID                                                   { printProductionRule(11); }
			;
Statements	: Statement	                                                { printProductionRule(12); }
 			| Statements Statement                                      { printProductionRule(13); }
			;
Statement	: LBRACE Statements RBRACE                                  { printProductionRule(14); }
			| Type ID SC                                                { printProductionRule(15); }
			| Type ID ASSIGN Exp SC                                     { printProductionRule(16); }
			| ID ASSIGN Exp SC                                          { printProductionRule(17); }
			| Call SC                                                   { printProductionRule(18); }
			| RETURN SC	                                                { printProductionRule(19); }
			| RETURN Exp SC                                             { printProductionRule(20); }
			| IF LPAREN Exp RPAREN Statement                            { printProductionRule(21); }
			| IF LPAREN Exp RPAREN Statement ELSE Statement             { printProductionRule(22); }
			| WHILE LPAREN Exp RPAREN Statement                         { printProductionRule(23); }
			| BREAK SC                                                  { printProductionRule(24); }
			| CONTINUE SC                                               { printProductionRule(25); }
			;
Call 		: ID LPAREN ExpList RPAREN                                  { printProductionRule(26); }
 			| ID LPAREN RPAREN                                          { printProductionRule(27); }
			;
ExpList 	: Exp                                                       { printProductionRule(28); }
 			| Exp COMMA ExpList                                         { printProductionRule(29); }
			;
Type 		: INT                                                       { printProductionRule(30); }
			| BYTE                                                      { printProductionRule(31); }
			| BOOL                                                      { printProductionRule(32); }
			;
Exp 		: LPAREN Exp RPAREN	                                        { printProductionRule(33); }
			| Exp ADDOP Exp                                             { printProductionRule(34); }
            | Exp MULOP Exp                                             { printProductionRule(34); }
			| ID                                                        { printProductionRule(35); }
			| Call                                                      { printProductionRule(36); }
			| NUM                                                       { printProductionRule(37); }
			| NUM B                                                     { printProductionRule(38); }
			| STRING                                                    { printProductionRule(39); }
			| TRUE                                                      { printProductionRule(40); }
			| FALSE                                                     { printProductionRule(41); }
			| NOT Exp                                                   { printProductionRule(42); }
			| Exp AND Exp                                               { printProductionRule(43); }
			| Exp OR Exp                                                { printProductionRule(44); }
			| Exp RELOP Exp                                             { printProductionRule(45); }
            | Exp EQOP Exp                                              { printProductionRule(45); }
			| LPAREN Type RPAREN Exp                                    { printProductionRule(46); }
			;

%%

int main()
{ 
	return yyparse();
}

void yyerror(const char* message)
{
	output::errorSyn(yylineno);
	exit(0); 
}

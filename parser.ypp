%{

extern int yylex();
void yyerror(const char* message);
extern int yylineno;

%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right ASSIGN
%left  OR
%left  AND
%left  EQOP
%left  RELOP
%left  ADDOP
%left  MULOP
%right NOT
%right LPAREN
%left  RPAREN
%left  ELSE

%%

Program 	: Funcs 													{ }
			;
Funcs   	: /*epsilon*/												{ }
      		| FuncDecl Funcs											{ }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { }
			;
RetType 	: Type                                                      { }
        	| VOID                                                      { }
			;
Formals 	: /*epsilon*/                                               { }
        	| FormalsList                                               { }
			;
FormalsList : FormalDecl                                                { }
			| FormalDecl COMMA FormalsList                              { }
			;
FormalDecl 	: Type ID                                                   { }
			;
Statements	: Statement	                                                { }
 			| Statements Statement                                      { }
			;
Statement	: LBRACE Statements RBRACE                                  { }
			| Type ID SC                                                { }
			| Type ID ASSIGN Exp SC                                     { }
			| ID ASSIGN Exp SC                                          { }
			| Call SC                                                   { }
			| RETURN SC	                                                { }
			| RETURN Exp SC                                             { }
			| IF LPAREN Exp RPAREN Statement                            { }
			| IF LPAREN Exp RPAREN Statement ELSE Statement             { }
			| WHILE LPAREN Exp RPAREN Statement                         { }
			| BREAK SC                                                  { }
			| CONTINUE SC                                               { }
			;
Call 		: ID LPAREN ExpList RPAREN                                  { }
 			| ID LPAREN RPAREN                                          { }
			;
ExpList 	: Exp                                                       { }
 			| Exp COMMA ExpList                                         { }
			;
Type 		: INT                                                       { }
			| BYTE                                                      { }
			| BOOL                                                      { }
			;
Exp 		: LPAREN Exp RPAREN	                                        { }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                         { /*TODO: handle this new rule*/ }
			| Exp ADDOP Exp                                             { }
            | Exp MULOP Exp                                             { }
			| ID                                                        { }
			| Call                                                      { }
			| NUM                                                       { }
			| NUM B                                                     { }
			| STRING                                                    { }
			| TRUE                                                      { }
			| FALSE                                                     { }
			| NOT Exp                                                   { }
			| Exp AND Exp                                               { }
			| Exp OR Exp                                                { }
			| Exp RELOP Exp                                             { }
            | Exp EQOP Exp                                              { }
			| LPAREN Type RPAREN Exp                                    { }
			;

%%

int main()
{ 
	return yyparse();
}

void yyerror(const char* message)
{
    //TODO: handle error
	exit(0); 
}

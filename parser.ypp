%{

#include "hw3_output.hpp"
#include "symbol_table.hpp"
#include "generic_syntax.hpp" 
#include <list>
#include <string>

extern int yylineno;

extern int yylex();

void yyerror(const char* message);

void add_function_symbol(std::string name, type_syntax* return_type, list_syntax<formal_syntax>* formal_list);

%}

%code requires 
{
    #include "syntax_token.hpp"
    #include "abstract_syntax.hpp" 
    #include "generic_syntax.hpp" 
    #include "expression_syntax.hpp"
    #include "statement_syntax.hpp" 
}

%union 
{ 
    syntax_token*                             token;
    numeric_syntax_token*                     num_token;
    root_syntax*                              root;
    type_syntax*                              type;                  
    formal_syntax*                            formal;     
    function_declaration_syntax*              function;            
    statement_syntax*                         statement; 	
    expression_syntax*                        expression;  
    list_syntax<formal_syntax>*               formal_list;		         
    list_syntax<function_declaration_syntax>* function_list;	
    list_syntax<statement_syntax>*            statement_list;
    list_syntax<expression_syntax>*           expression_list;                
 };

%token <token> VOID
%token <token> INT
%token <token> BYTE
%token <token> B
%token <token> BOOL
%token <token> TRUE
%token <token> FALSE
%token <token> RETURN
%token <token> WHILE
%token <token> BREAK
%token <token> CONTINUE
%token <token> SC
%token <token> COMMA
%token <token> LBRACE
%token <token> RBRACE
%token <num_token> NUM
%token <token> ID
%token <token> STRING

%right <token> ASSIGN
%nonassoc <token> IF // TODO: VERIFY IF IN RIGHT POSITION
%left <token> OR
%left <token> AND
%left <token> EQOP
%left <token> RELOP
%left <token> ADDOP
%left <token> MULOP
%right <token> NOT
%right <token> LPAREN
%left <token> RPAREN
%left <token> ELSE

%type <root>            Program
%type <function_list>   Funcs
%type <function>        FuncDecl
%type <type>            RetType
%type <formal_list> 	Formals
%type <formal_list>     FormalsList
%type <formal>          FormalDecl
%type <statement_list>  Statements
%type <statement>   	Statement
%type <expression>      Call
%type <expression_list> ExpList
%type <type>			Type
%type <expression>      Exp

%%

Program 	: OS Funcs CS 												        { $$ = new root_syntax($2); }
			;       
Funcs   	: /*epsilon*/												        { $$ = new list_syntax<function_declaration_syntax>(); }
      		| FuncDecl Funcs											        { $$ = $2->push_front($1); }
			;
FuncDecl 	: RetType ID LPAREN Formals RPAREN                                  { add_function_symbol($2->text, $1, $4); } 
              LBRACE Statements CS RBRACE                                       { $$ = new function_declaration_syntax($1, $2->text, $4, $8); free($2); }
			;
RetType 	: Type                                                              { $$ = $1; }
        	| VOID                                                              { $$ = new type_syntax(fundamental_type::Void); }
			;       
Formals 	: /*epsilon*/                                                       { $$ = new list_syntax<formal_syntax>(); }
        	| FormalsList                                                       { $$ = $1; }
			;       
FormalsList : FormalDecl                                                        { $$ = new list_syntax<formal_syntax>($1); }
			| FormalDecl COMMA FormalsList                                      { $$ = $3->push_front($1); }
			;       
FormalDecl 	: Type ID                                                           { $$ = new formal_syntax($1, $2->text); free($2); }
			;       
Statements	: Statement	                                                        { $$ = new list_syntax<statement_syntax>($1); }
 			| Statements Statement                                              { $$ = $1->push_back($2); }
			;
Statement	: LBRACE OS Statements CS RBRACE                                    { $$ = new block_statement_syntax($3); }
			| Type ID SC                                                        { $$ = new declaration_statement_syntax($1, $2->text); free($2); }
			| Type ID ASSIGN Exp SC                                             { $$ = new declaration_statement_syntax($1, $2->text, $4); free($2); }
			| ID ASSIGN Exp SC                                                  { $$ = new assignment_statement_syntax($1->text, $3); free($1); }
			| Call SC                                                           { $$ = new expression_statement_syntax($1); }
			| RETURN SC	                                                        { $$ = new return_statement_syntax(); }
			| RETURN Exp SC                                                     { $$ = new return_statement_syntax($2); }
			| IF LPAREN OS Exp CS RPAREN OS Statement CS                        { $$ = new if_statement_syntax($4, $8); }
			| IF LPAREN OS Exp CS RPAREN OS Statement CS ELSE OS Statement CS   { $$ = new if_statement_syntax($4, $8, $12); }
			| WHILE LPAREN OS Exp CS RPAREN OS Statement CS                     { $$ = new while_statement_syntax($4, $8); }
			| BREAK SC                                                          { $$ = new branch_statement_syntax(branch_type::Break); }
			| CONTINUE SC                                                       { $$ = new branch_statement_syntax(branch_type::Continue); }
            ;       
Call 		: ID LPAREN ExpList RPAREN                                          { $$ = new invocation_expression_syntax($1->text, $3); free($1); }
 			| ID LPAREN RPAREN                                                  { $$ = new invocation_expression_syntax($1->text); free($1); }
			;       
ExpList 	: Exp                                                               { $$ = new list_syntax<expression_syntax>($1); }
 			| Exp COMMA ExpList                                                 { $$ = $3->push_front($1); }
			;       
Type 		: INT                                                               { $$ = new type_syntax(fundamental_type::Int); }
			| BYTE                                                              { $$ = new type_syntax(fundamental_type::Byte); }
			| BOOL                                                              { $$ = new type_syntax(fundamental_type::Bool); }
			;       
Exp 		: LPAREN Exp RPAREN	                                                { $$ = $2; }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                                 { $$ = new conditional_expression_syntax($1, $4, $7); }
			| Exp ADDOP Exp                                                     { $$ = new arithmetic_expression_syntax($1, $3, $2->text); free($2); }
            | Exp MULOP Exp                                                     { $$ = new arithmetic_expression_syntax($1, $3, $2->text); free($2); }
			| ID                                                                { $$ = new identifier_expression_syntax($1->text); free($1); }
			| Call                                                              { $$ = $1; }
			| NUM                                                               { $$ = new literal_expression_syntax<int>($1->value); }
			| NUM B                                                             { $$ = new literal_expression_syntax<char>($1->value); }
			| STRING                                                            { $$ = new literal_expression_syntax<std::string>($1->text); free($1); }
			| TRUE                                                              { $$ = new literal_expression_syntax<bool>(true); }
			| FALSE                                                             { $$ = new literal_expression_syntax<bool>(false); }
			| NOT Exp                                                           { $$ = new not_expression_syntax($2); }
			| Exp AND Exp                                                       { $$ = new logical_expression_syntax($1, $3, logical_operator::And); }
			| Exp OR Exp                                                        { $$ = new logical_expression_syntax($1, $3, logical_operator::Or); }
			| Exp RELOP Exp                                                     { $$ = new relational_expression_syntax($1, $3, $2->text); free($2); }
            | Exp EQOP Exp                                                      { $$ = new relational_expression_syntax($1, $3, $2->text); free($2); } 
			| LPAREN Type RPAREN Exp                                            { $$ = new cast_expression_syntax($2, $4); }
			;
OS          : /*epsilon*/                                                       { symbol_table::instance().open_scope(); } 
            ;       
CS          : /*epsilon*/                                                       { symbol_table::instance().get_scopes().front().print_symbols(); 
                                                                                  symbol_table::instance().close_scope(); }
            ;
%%

int main()
{
	return yyparse();
}

void yyerror(const char* message)
{
    output::errorSyn(yylineno);
}

void add_function_symbol(std::string name, type_syntax* return_type, list_syntax<formal_syntax>* formal_list)
{
    symbol_table& symtab = symbol_table::instance();

    if (symtab.contains_symbol(name))
    {
        output::errorDef(yylineno, name);
    }

    std::vector<fundamental_type> param_types;

    for (formal_syntax* fs : formal_list->get_elements())
    {
        param_types.push_back(fs->type->type);
    } 

    symtab.add_function(name, return_type->type, param_types);

    symtab.open_scope(-1 * param_types.size());

    for (formal_syntax* fs : formal_list->get_elements())
    {
        if (symtab.contains_symbol(fs->identifier))
        {
            output::errorDef(yylineno, name);
        }

        symtab.add_variable(fs->identifier, fs->type->type);
    }
}
